Author:  Kristen Friday
Date:    October 31, 2021
Subject: Replication


Throughput Data:

**throughput measured in operations/second


N = 1, K = 1
------------------------------------------------------------------------
 # of Clients |   Client  |  Insert  |  Lookup  |  Scan  |  Remove
------------------------------------------------------------------------
      1       |   Total   |   410    |   1869   |  256   |    437
------------------------------------------------------------------------
      2       |    #1     |   319    |   1594   |  318   |    340
              |    #2     |   306    |   852    |  340   |    290
              |   Total   |   625    |   2446   |  658   |    630
------------------------------------------------------------------------
      3       |    #1     |   313    |   272    |  338   |    263
              |    #2     |   252    |   1137   |  273   |    249
              |    #3     |   228    |   1044   |  287   |    225
              |   Total   |   793    |   2453   |  898   |    737
------------------------------------------------------------------------
      4       |    #1     |   196    |   832    |  240   |    191
              |    #2     |   203    |   567    |  295   |    174
              |    #3     |   263    |   966    |  190   |    275
              |    #4     |   285    |   259    |  327   |    194
              |   Total   |   947    |   2624   |  1052  |    834
------------------------------------------------------------------------
      5       |    #1     |   136    |   539    |  243   |    142
              |    #2     |   163    |   345    |  278   |    142
              |    #3     |   159    |   778    |  174   |    167
              |    #4     |   262    |   160    |  308   |    176
              |    #5     |   205    |   753    |  153   |    236
              |   Total   |   925    |   2575   |  1156  |    863

                                

N = 3, K = 2
------------------------------------------------------------------------
 # of Clients |   Client  |  Insert  |  Lookup  |  Scan  |  Remove
------------------------------------------------------------------------
      1       |   Total   |   195    |   1775   |  197   |    207
------------------------------------------------------------------------
      2       |    #1     |   155    |   1603   |  230   |    157
              |    #2     |   154    |   1829   |  209   |    159
              |   Total   |   309    |   3432   |  439   |    316
------------------------------------------------------------------------
      3       |    #1     |   144    |   1791   |  196   |    156
              |    #2     |   144    |   1585   |  227   |    153
              |    #3     |   146    |   1362   |  244   |    153
              |   Total   |   434    |   4738   |  667   |    462
------------------------------------------------------------------------
      4       |    #1     |   165    |   1071   |  222   |    129
              |    #2     |   161    |   1322   |  183   |    158
              |    #3     |   171    |   1736   |  135   |    175
              |    #4     |   163    |   1590   |  161   |    162
              |   Total   |   660    |   5719   |  701   |    624
------------------------------------------------------------------------
      5       |    #1     |   165    |   1635   |  135   |    187
              |    #2     |   148    |   1480   |  170   |    168
              |    #3     |   156    |   638    |  230   |    166
              |    #4     |   146    |   962    |  216   |    161
              |    #5     |   145    |   1245   |  195   |    159
              |   Total   |   760    |   5960   |  946   |    841



N = 5, K = 3
------------------------------------------------------------------------
 # of Clients |   Client  |  Insert  |  Lookup  |  Scan  |  Remove
------------------------------------------------------------------------
      1       |   Total   |   114    |   1722   |  160   |    123
------------------------------------------------------------------------
      2       |    #1     |   107    |   1766   |  156   |    115
              |    #2     |   111    |   1653   |  169   |    112
              |   Total   |   218    |   3419   |  325   |    227
------------------------------------------------------------------------
      3       |    #1     |   103    |   1637   |  153   |    107
              |    #2     |   104    |   1750   |  134   |    106
              |    #3     |   109    |   1331   |  174   |    106
              |   Total   |   316    |   4718   |  461   |    319
------------------------------------------------------------------------
      4       |    #1     |   105    |   1769   |  108   |    117
              |    #2     |   101    |   1070   |  177   |    109
              |    #3     |   102    |   1594   |  135   |    110
              |    #4     |   101    |   1389   |  156   |    112
              |   Total   |   409    |   5822   |  576   |    448
------------------------------------------------------------------------
      5       |    #1     |   122    |   1605   |  103   |    132
              |    #2     |   112    |   1615   |  113   |    131
              |    #3     |   110    |   1014   |  160   |    119
              |    #4     |   110    |   1135   |  152   |    120
              |    #5     |   111    |   1405   |  135   |    125
              |   Total   |   565    |   6774   |  663   |    627



Performance Analysis:

Generally speaking for insert and remove operations, the throughput for each 
individual client stays relatively constant relative to each other. As the number of 
clients increases, the constant throughput for each client decreases in value 
(more so when N=1 and K=1) for the individual client. However, the total 
throughput for insert and remove operations appears to increase unlike the previous 
assignment in which the total throughput for insert and removal stayed constant. 
The total increase eventually levels out when the hardware hits its maximum 
threshold of performance, but until then, the server will interleave requests 
and increase insert/remove throughput.

The lookup and scan operations likewise show that the throughput of individual clients
stays relatively constant as the number of clients increases. Therefore as more clients
are added, the sum of the lookup and scan operations increases. I hypothesize that
the increasing trend is caused by the interleaving of requests and responses 
between clients. An interesting point is that compared to the data
in A4, the total throughputs for lookup and scan are much less (~5000 lookup operations
in A5, >25000 operations in A4; ~500 scan operations in A5, >4000 operations in A4). 
The reasoning behind the decrease in lookup performance is that in A4, the lookup
was performed on a single server in O(1) time. In A5, each server behaves as its own
hash table and to find the value associated with a key, the client may have had to
search through multiple servers and possibly even retry failed clients. Similarly,
the scan operation required searching through all N servers and waiting for the 
acknowledgment. Having to call scan on multiple machines and concatening the results
together thus heavily impacted performance.

Comparing different values for N and K, it is interesting to see how replication 
affects write operations with the decided semantics. For this system, we determined
that write operations must be successful on all servers in which the data is intended
to be written. As K increases, the total throughput for insert and remove
decreases because the system must perform K times the number of original RPC calls.
For example, when K = 1, the total throughput for 5 clients was 925 ops/s, but when
K increased to 3, the total throughput for 5 clients was 565 ops/s. A similar trend
is demonstrated by the remove operation.

As N increases, the data shows that the performance of the scan operation is impacted.
This degradation is caused by the fact that scan must check a regex across all
available servers. Therefore, the number of RPC calls for scan increases by N times.
The performance of the individual clients for scan still remains about constant.

Contrary to the performance of scan, the lookup operation increases its total
performance as N and K increase. Because the lookup operation returns immediately
upon finding at least one value associated with the target key, the more replications
will result in a greater hit rate for finding data. Therefore, as K increases, the 
lookup operation will have a higher probability of exiting quickly and thus ability
to perform more operations.
